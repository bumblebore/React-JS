1) what we have learnt : How to save data from input text fields --> state


2)
//we have 2 fields

Top Text		Bottom Text		//fields

	-------------------------
     |-> Get a new meme image  |	//button
	-------------------------
//why added wrapper class? whole thing considered the meme	
 	meme	--> //position relative
		    //set position of h2 --> absolute

//top-text and bottom-text hardcoded

		    			


Objective1 : connect input fields to state
	every keystroke

Objective2 : Replace hardcoded text with the text we are saving in state 	
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++=
import React from "react"
import memesData from "../memesData.js"
export default function Meme() {

const [meme, setMeme] = React.useState({
	topText: "",
	bottomText: "F,
	randomImage: khttp://i.imgflip.com/1bij.jpg"
})
const [allMemeImages, setAllMemeImages] = React.useState(memesData)

function getMemeImage() {
const memesArray = allMemeImages.data.memes
const randomNumber = Math.floor(Math.random() * memesArray.length)
const url = memesArray[randomNumber].url
setMeme(prevMeme => ({
...prevMeme,
randomImage: url 
}))
}

return (
(main>
(div className="form">

<input
type="text"
placeholder="Top text"
className="form—-input"

/>

<input
type="text"
placeholder="Bottom text"
className="form——input"

/>

<button
className="form——button"
onClick={getMemeImage}

>
Get a new meme image E3

</button>
</div>
<div className="meme">								//why added wrapper class? whole thing considered the meme	
																		//position relative.why? //h2 																		set to position absolute
											
	<img src={meme.randomImage} className="meme——image" />
	<h2 className="meme—-text top">0ne does not simply</h2>
	<h2 className="meme—-text bottom">Walk into mordor</h2>
</div> 
</main>
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Solution:

1.1) Add properties in input to watch for changes

	name //can give any name
	value
	onChange={handleChange}
		Create handleChange function
		What handleChange function contains?
			//pull in event (pass in event as parameter)	
			//What it does with that event? gets name and value property from event
			//How to get those name and value property? destructure it out
										destructure out from what? event.target
			function handleChange(event) {
				const {name, value} = event.target	
			}
		


1.2)button contains onClick={getMemeImage}
	just like Inside function getMemeImage() 	
	we created setMeme(prevMeme => ({
		...prevMeme,
		randomImage: url
	}))
	
1.3) 	use setMeme in handleChange()
	What setMeme() will do?	
	Do we need access to previous version of meme? Yes
	return an object  (to return implicitly -> wrap object in curly braces)  //represents an object
		//Copy all properties of previous meme  //...prevMeme
		//depending on what pulled from event.target --> change either top-text or bottom-text
			
	//use computed property to set its value = value	
		[name]: value

		

1.4) instead of hardcoded top-text and bottom-text
		update to? object values
Ex		<h2 className="meme—-text top">0ne does not simply</h2> ---> 	<h2 className="meme—-text top">{meme.topText}</h2>

1.5) Test: Save
	Typeitout
	     : One Does not Simply 	//MAGICC!! --> text starts appearing on image itself letter by letter
		 Walk into mordor	

1.6) App is working 
	we are importing data from memeData.js
	//How to get data instead from api?

import React from "react"
import memesData from "../memesData.js"
export default function Meme() {

const [meme, setMeme] = React.useState({
	topText: "",
	bottomText: "F,
	randomImage: khttp://i.imgflip.com/1bij.jpg"
})
const [allMemeImages, setAllMemeImages] = React.useState(memesData)

function getMemeImage() {
const memesArray = allMemeImages.data.memes
const randomNumber = Math.floor(Math.random() * memesArray.length)
const url = memesArray[randomNumber].url
setMeme(prevMeme => ({
	...prevMeme,
	randomImage: url 
}))
}

function handleChange(event) {
	const {name, value} = event.target
	setMeme(prevMeme => {
		...prevMeme,
		[name]: value
	}))
}

return (
(main>
(div className="form">

<input
type="text"
placeholder="Top text"
className="form—-input"
name="topText"
value={meme.topText}
onChange={handleChange}
/>

<input
type="text"
placeholder="Bottom text"
className="form——input"
name="bottomText"
value={meme.bottomText}
onChange={handleChange}
/>

<button
	className="form——button"
	onClick={getMemeImage}
>
Get a new meme image 
</button>

</div>
<div className="meme">								//why added wrapper class? whole thing considered the meme	
																		//position relative.why? //h2 																		set to position absolute
											
	<img src={meme.randomImage} className="meme——image" />
	<h2 className="meme—-text top">{meme.topText}</h2>
	<h2 className="meme—-text bottom">{meme.bottomText} </h2>
</div> 
</main>

